# Time Series Classification Models Configuration

# sktime models
TSF:
  library: sktime
  import_path: sktime.classification.interval_based
  class_name: TimeSeriesForestClassifier
  params:
    n_estimators: 100
    random_state: 42
  fast_params:
    n_estimators: 10
    random_state: 42
  fast_name: TSF-fast
  param_grid:
    n_estimators: [50, 100, 200]
    min_samples_leaf: [1, 3, 5]
  in_sets: [paper, full, sktime]

KNN-DTW:
  library: sktime
  import_path: sktime.classification.distance_based
  class_name: KNeighborsTimeSeriesClassifier
  params:
    n_neighbors: 3
  fast_params:
    n_neighbors: 1
  fast_name: KNN-DTW-fast
  param_grid:
    n_neighbors: [1, 3, 5, 7]
    distance: ['dtw', 'euclidean', 'lcss']
  in_sets: [paper, full, sktime]

IndividualBOSS:
  library: sktime
  import_path: sktime.classification.dictionary_based
  class_name: IndividualBOSS
  params:
    random_state: 42
  param_grid:
    max_window: [10, 20, 30]
    word_length: [6, 8, 10]
  in_sets: [paper, full, sktime]

BOSS:
  library: sktime
  import_path: sktime.classification.dictionary_based
  class_name: BOSSEnsemble
  params:
    random_state: 42
  param_grid:
    max_ensemble_size: [5, 10, 20]
    word_length: [6, 8, 10]
  in_sets: [full, sktime]

WEASEL:
  library: sktime
  import_path: sktime.classification.dictionary_based
  class_name: WEASEL
  params:
    random_state: 42
  param_grid:
    word_length: [3, 4, 5]
    chi2_threshold: [0, 2, 5]
  in_sets: [paper, full, sktime]

Shapelet:
  library: sktime
  import_path: sktime.classification.shapelet_based
  class_name: ShapeletTransformClassifier
  params:
    random_state: 42
    n_shapelet_samples: 100
    max_shapelets: 20
  param_grid:
    n_shapelet_samples: [100, 200]
    max_shapelets: [10, 20, 50]
  in_sets: [full, sktime]

CNN:
  library: sktime
  import_path: sktime.classification.deep_learning
  class_name: CNNClassifier
  params:
    n_epochs: 20
    batch_size: 16
    random_state: 42
  param_grid:
    n_epochs: [10, 20, 50]
    batch_size: [8, 16, 32]
  in_sets: [full, sktime]

FreshPRINCE:
  library: sktime
  import_path: sktime.classification.feature_based
  class_name: FreshPRINCE
  params:
    random_state: 42
  param_grid:
    n_estimators: [100, 200]
  in_sets: [full, sktime]

CTSF:
  library: sktime
  import_path: sktime.classification.ensemble
  class_name: ComposableTimeSeriesForestClassifier
  params:
    n_estimators: 100
    random_state: 42
  param_grid:
    n_estimators: [50, 100, 200]
  in_sets: [full, sktime]

HIVECOTE:
  library: sktime
  import_path: sktime.classification.hybrid
  class_name: HIVECOTEV2
  params:
    random_state: 42
    n_jobs: 1
    stc_params:
      n_shapelet_samples: 100
      max_shapelets: 20
  in_sets: [full, sktime]

# sklearn models
RF:
  library: sklearn
  import_path: sklearn.ensemble
  class_name: RandomForestClassifier
  params:
    n_estimators: 100
    random_state: 42
  fast_params:
    n_estimators: 10
    random_state: 42
  fast_name: RF-fast
  param_grid:
    n_estimators: [50, 100, 200]
    max_depth: [null, 10, 20]
    min_samples_split: [2, 5, 10]
  in_sets: [paper, full, sklearn]

GBM:
  library: sklearn
  import_path: sklearn.ensemble
  class_name: GradientBoostingClassifier
  params:
    n_estimators: 100
    random_state: 42
  param_grid:
    n_estimators: [50, 100, 200]
    learning_rate: [0.01, 0.1, 0.2]
    max_depth: [3, 5, 7]
  in_sets: [paper, full, sklearn]

AdaBoost:
  library: sklearn
  import_path: sklearn.ensemble
  class_name: AdaBoostClassifier
  params:
    n_estimators: 100
    random_state: 42
  param_grid:
    n_estimators: [50, 100, 200]
    learning_rate: [0.01, 0.1, 1.0]
  in_sets: [full, sklearn]

ExtraTrees:
  library: sklearn
  import_path: sklearn.ensemble
  class_name: ExtraTreesClassifier
  params:
    n_estimators: 100
    random_state: 42
  param_grid:
    n_estimators: [50, 100, 200]
    max_depth: [null, 10, 20]
    min_samples_split: [2, 5, 10]
  in_sets: [full, sklearn]

KNN:
  library: sklearn
  import_path: sklearn.neighbors
  class_name: KNeighborsClassifier
  params:
    n_neighbors: 5
  param_grid:
    n_neighbors: [3, 5, 7, 11]
    weights: ['uniform', 'distance']
    metric: ['euclidean', 'manhattan', 'minkowski']
  in_sets: [full, sklearn]

DT:
  library: sklearn
  import_path: sklearn.tree
  class_name: DecisionTreeClassifier
  params:
    random_state: 42
  fast_params:
    random_state: 42
  fast_name: DT-fast
  param_grid:
    max_depth: [null, 5, 10, 20]
    min_samples_split: [2, 5, 10]
    criterion: ['gini', 'entropy']
  in_sets: [full, sklearn]

MLP:
  library: sklearn
  import_path: sklearn.neural_network
  class_name: MLPClassifier
  params:
    hidden_layer_sizes: [100, 50]
    random_state: 42
  paper_params:
    hidden_layer_sizes: [100, 50]
    max_iter: 500
    random_state: 42
  param_grid:
    hidden_layer_sizes: [[50], [100], [100, 50], [200, 100]]
    alpha: [0.0001, 0.001, 0.01]
    learning_rate_init: [0.001, 0.01]
  in_sets: [paper, full, sklearn]

SVM:
  library: sklearn
  import_path: sklearn.svm
  class_name: SVC
  params:
    probability: true
    random_state: 42
  param_grid:
    C: [0.1, 1.0, 10.0]
    gamma: [0.01, 0.1, 1.0, 'scale']
    kernel: ['rbf', 'linear', 'poly']
  in_sets: [paper, full, sklearn]

LogReg:
  library: sklearn
  import_path: sklearn.linear_model
  class_name: LogisticRegression
  params:
    max_iter: 1000
    random_state: 42
  param_grid:
    C: [0.1, 1.0, 10.0]
    penalty: ['l1', 'l2', 'elasticnet', null]
    solver: ['lbfgs', 'liblinear', 'saga']
  in_sets: [full, sklearn]

GNB:
  library: sklearn
  import_path: sklearn.naive_bayes
  class_name: GaussianNB
  params: {}
  param_grid:
    var_smoothing: [1e-11, 1e-9, 1e-7]
  in_sets: [full, sklearn]

LDA:
  library: sklearn
  import_path: sklearn.discriminant_analysis
  class_name: LinearDiscriminantAnalysis
  params: {}
  param_grid:
    solver: ['svd', 'lsqr', 'eigen']
    shrinkage: [null, 'auto', 0.1, 0.5, 0.9]
  in_sets: [full, sklearn]

HistGBM:
  library: sklearn
  import_path: sklearn.ensemble
  class_name: HistGradientBoostingClassifier
  params:
    max_iter: 100
    random_state: 42
  param_grid:
    max_iter: [50, 100, 200]
    learning_rate: [0.01, 0.1, 0.2]
    max_depth: [null, 5, 10]
  in_sets: [full, sklearn]